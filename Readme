# Global Stories Backend

A backend API for the Global Stories application that allows users to share and interact with stories from around the world.

## Features

- User authentication and authorization
- Post creation, retrieval, updating, and deletion
- Comments and likes functionality
- Profile image uploads
- Country-based data visualization

## Technologies

- Node.js
- Express.js
- MongoDB
- AWS S3 for file storage
- JWT for authentication
- Multer and Multer-S3 for file uploads

## Prerequisites

- Node.js (v16.x or higher)
- npm or yarn
- MongoDB database (Atlas or local)
- AWS account with S3 access

## Getting Started

1. Clone the repository

   ```bash
   git clone <repository-url>
   cd backend
   ```

2. Install dependencies

   ```bash
   npm install
   ```

3. Set up environment variables

   - Copy `.env.example` to `.env`
   - Fill in the required environment variables

   ```
   PORT=5000
   NODE_ENV=development
   DB_USER=your_mongodb_username
   DB_PASSWORD=your_mongodb_password
   DB_NAME=your_mongodb_database_name
   JWT_SECRET_KEY=your_jwt_secret_key
   JWT_EXPIRES_IN=30d
   AWS_ACCESS_KEY_ID=your_aws_access_key_id
   AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
   AWS_REGION=us-east-1
   AWS_S3_BUCKET_NAME=your-s3-bucket-name
   ```

4. Set up AWS S3 bucket

   - Create an AWS account if you don't have one
   - Create an IAM user with S3 full access
   - Note down the access key ID and secret access key
   - Run the S3 setup script:
     ```bash
     npm run setup-s3
     ```

5. Start the development server
   ```bash
   npm run dev
   ```

## API Endpoints

### Authentication

- POST `/api/auth/register` - Register a new user
- POST `/api/auth/login` - Login a user
- GET `/api/auth/me` - Get current user profile
- PUT `/api/auth/profile-image` - Upload profile image

### Posts

- GET `/api/posts` - Get all posts
- GET `/api/posts/:id` - Get a specific post
- POST `/api/posts` - Create a new post
- PUT `/api/posts/:id` - Update a post
- DELETE `/api/posts/:id` - Delete a post
- POST `/api/posts/:id/comments` - Add a comment to a post
- DELETE `/api/posts/:id/comments/:commentId` - Delete a comment
- PUT `/api/posts/:id/like` - Like/unlike a post
- GET `/api/posts/user/:userId` - Get posts by user
- GET `/api/posts/category/:category` - Get posts by category
- GET `/api/posts/popular` - Get popular posts

### Map Data

- GET `/api/map-data` - Get user distribution data for map visualization

## Deployment

The application is set up for easy deployment:

1. Set up environment variables in your deployment environment
2. Run `npm start` to start the production server

## File Storage with S3

The application uses AWS S3 for storing user profile images and post images:

- Profile images are stored in the `profiles/` folder in the S3 bucket
- Post images are stored in the `posts/` folder in the S3 bucket
- Images are automatically resized and optimized before upload
- Old images are automatically deleted when replaced
- When a post is deleted, its associated images are also deleted from S3

## Security Measures

- Passwords are hashed using bcrypt
- JWT authentication with expiry
- Rate limiting to prevent abuse
- Helmet.js for securing HTTP headers
- CORS configuration to restrict access
- File type validation for uploads

## License

ISC
